version: "3"
services:
  reverse_proxy:
    build:
      context: Services/reverse_proxy
    restart: always
    environment:
      - APP_PORT=${APP_PORT}
      - APP_SERVICE=web_app
      - FLASK_SERVER_NAME=${FLASK_SERVER_NAME}
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./achme-challenge:/var/www/certbot
      - ./flags:/flags
    depends_on:
      - web_app
    networks:
      - frontend
    secrets:
      - site_cert
      - site_key
      - dhparam
  web_app:
    build:
      context: .
      dockerfile: Dockerfile.flask
    image: figure_hook_app
    environment:
      - FLASK_SERVER_NAME=${FLASK_SERVER_NAME}
      - APP_PORT=${APP_PORT}
      - APP_WORKERS=2
    env_file:
      - .env
    volumes:
      - ./flags:/flags
    networks:
      - frontend
      - backend
    depends_on:
      - redis
      - rabbitmq
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.celery
    image: figure_hook_scheduler
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - rabbitmq
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.scrapyd
    image: figure_hook_crawler
    restart: always
    env_file:
      - .env
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3.8.14
    restart: always
    container_name: rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - backend
  redis:
    image: redis:alpine
    restart: always
    networks:
      - backend

networks:
  frontend:
  backend:

secrets:
  site_cert:
    file: ./secrets/nginx.crt
  site_key:
    file: ./secrets/nginx.key
  dhparam:
    file: ./secrets/dhparam.pem
