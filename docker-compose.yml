version: "3"
services:
  reverse_proxy:
    build:
      context: Services/reverse_proxy
      dockerfile: DockerFile
    container_name: reverse_proxy
    restart: always
    environment:
      - FLASK_URL=web_app:8000
      - FLASK_SERVER_NAME=${FLASK_SERVER_NAME}
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./flags:/flags
    depends_on:
      - web_app
    networks:
      - frontend
    secrets:
      - site_cert
      - site_key
  web_app:
    build:
      context: .
      dockerfile: DockerFile.flask
    image: figure_hook_app
    environment:
      - FLASK_ENV=production
      - FLASK_SERVER_NAME=localhost
    env_file:
      - .env
    volumes:
      - ./flags:/flags
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
      - scheduler
      - rabbitmq
  scheduler:
    build:
      context: .
      dockerfile: DockerFile.celery
    image: figure_hook_scheduler
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - db
      - rabbitmq
  crawler:
    build:
      context: .
      dockerfile: DockerFile.scrapyd
    image: figure_hook_crawler
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - db
  db:
    image: postgres:13.1
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    env_file:
      - .env
    ports:
      - 5432:5432
    networks:
      - backend
    volumes:
      - ./data:/var/lib/postgresql/data
  rabbitmq:
    image: rabbitmq:3.8.14
    restart: always
    container_name: rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - backend
  redis:
    image: redis:alpine
    restart: always
    networks:
      - backend


networks:
  frontend:
  backend:

secrets:
  site_cert:
    file: ./nginx.crt
  site_key:
    file: ./nginx.key